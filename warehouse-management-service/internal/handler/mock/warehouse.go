// Code generated by MockGen. DO NOT EDIT.
// Source: warehouse-management-service/internal/handler (interfaces: WarehouseService)

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"
	wms "warehouse-management-service"

	gomock "github.com/golang/mock/gomock"
)

// MockWarehouseService is a mock of WarehouseService interface.
type MockWarehouseService struct {
	ctrl     *gomock.Controller
	recorder *MockWarehouseServiceMockRecorder
}

// MockWarehouseServiceMockRecorder is the mock recorder for MockWarehouseService.
type MockWarehouseServiceMockRecorder struct {
	mock *MockWarehouseService
}

// NewMockWarehouseService creates a new mock instance.
func NewMockWarehouseService(ctrl *gomock.Controller) *MockWarehouseService {
	mock := &MockWarehouseService{ctrl: ctrl}
	mock.recorder = &MockWarehouseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWarehouseService) EXPECT() *MockWarehouseServiceMockRecorder {
	return m.recorder
}

// CreateWarehouse mocks base method.
func (m *MockWarehouseService) CreateWarehouse(arg0 context.Context, arg1 *wms.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarehouse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWarehouse indicates an expected call of CreateWarehouse.
func (mr *MockWarehouseServiceMockRecorder) CreateWarehouse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarehouse", reflect.TypeOf((*MockWarehouseService)(nil).CreateWarehouse), arg0, arg1)
}

// DeleteWarehouse mocks base method.
func (m *MockWarehouseService) DeleteWarehouse(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWarehouse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWarehouse indicates an expected call of DeleteWarehouse.
func (mr *MockWarehouseServiceMockRecorder) DeleteWarehouse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWarehouse", reflect.TypeOf((*MockWarehouseService)(nil).DeleteWarehouse), arg0, arg1)
}

// GetWarehouseById mocks base method.
func (m *MockWarehouseService) GetWarehouseById(arg0 context.Context, arg1 string) (*wms.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarehouseById", arg0, arg1)
	ret0, _ := ret[0].(*wms.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarehouseById indicates an expected call of GetWarehouseById.
func (mr *MockWarehouseServiceMockRecorder) GetWarehouseById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarehouseById", reflect.TypeOf((*MockWarehouseService)(nil).GetWarehouseById), arg0, arg1)
}

// UpdateWarehouse mocks base method.
func (m *MockWarehouseService) UpdateWarehouse(arg0 context.Context, arg1 *wms.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarehouse", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarehouse indicates an expected call of UpdateWarehouse.
func (mr *MockWarehouseServiceMockRecorder) UpdateWarehouse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarehouse", reflect.TypeOf((*MockWarehouseService)(nil).UpdateWarehouse), arg0, arg1)
}
