// Code generated by MockGen. DO NOT EDIT.
// Source: ./shelf_block.go

// Package mock_warehousemanagementservice is a generated GoMock package.
package mock_warehousemanagementservice

import (
	context "context"
	reflect "reflect"
	warehousemanagementservice "warehouse-management-service"

	gomock "github.com/golang/mock/gomock"
)

// MockShelfService is a mock of ShelfService interface.
type MockShelfService struct {
	ctrl     *gomock.Controller
	recorder *MockShelfServiceMockRecorder
}

// MockShelfServiceMockRecorder is the mock recorder for MockShelfService.
type MockShelfServiceMockRecorder struct {
	mock *MockShelfService
}

// NewMockShelfService creates a new mock instance.
func NewMockShelfService(ctrl *gomock.Controller) *MockShelfService {
	mock := &MockShelfService{ctrl: ctrl}
	mock.recorder = &MockShelfServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShelfService) EXPECT() *MockShelfServiceMockRecorder {
	return m.recorder
}

// CreateShelfBlock mocks base method.
func (m *MockShelfService) CreateShelfBlock(ctx context.Context, shelfBlock warehousemanagementservice.ShelfBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShelfBlock", ctx, shelfBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShelfBlock indicates an expected call of CreateShelfBlock.
func (mr *MockShelfServiceMockRecorder) CreateShelfBlock(ctx, shelfBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShelfBlock", reflect.TypeOf((*MockShelfService)(nil).CreateShelfBlock), ctx, shelfBlock)
}

// DeleteShelfBlockById mocks base method.
func (m *MockShelfService) DeleteShelfBlockById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShelfBlockById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShelfBlockById indicates an expected call of DeleteShelfBlockById.
func (mr *MockShelfServiceMockRecorder) DeleteShelfBlockById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShelfBlockById", reflect.TypeOf((*MockShelfService)(nil).DeleteShelfBlockById), ctx, id)
}

// GetShelfBlockById mocks base method.
func (m *MockShelfService) GetShelfBlockById(ctx context.Context, id string) (warehousemanagementservice.ShelfBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShelfBlockById", ctx, id)
	ret0, _ := ret[0].(warehousemanagementservice.ShelfBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShelfBlockById indicates an expected call of GetShelfBlockById.
func (mr *MockShelfServiceMockRecorder) GetShelfBlockById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShelfBlockById", reflect.TypeOf((*MockShelfService)(nil).GetShelfBlockById), ctx, id)
}

// UpdateShelfBlock mocks base method.
func (m *MockShelfService) UpdateShelfBlock(ctx context.Context, shelfBlock warehousemanagementservice.ShelfBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShelfBlock", ctx, shelfBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShelfBlock indicates an expected call of UpdateShelfBlock.
func (mr *MockShelfServiceMockRecorder) UpdateShelfBlock(ctx, shelfBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShelfBlock", reflect.TypeOf((*MockShelfService)(nil).UpdateShelfBlock), ctx, shelfBlock)
}
