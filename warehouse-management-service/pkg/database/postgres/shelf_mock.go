// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/database/postgres/shelf.go

// Package mock_postgres is a generated GoMock package.
package postgres

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	warehousemanagementservice "warehouse-management-service"

	gomock "github.com/golang/mock/gomock"
)

// MockshelfQueries is a mock of shelfQueries interface.
type MockshelfQueries struct {
	ctrl     *gomock.Controller
	recorder *MockshelfQueriesMockRecorder
}

// MockshelfQueriesMockRecorder is the mock recorder for MockshelfQueries.
type MockshelfQueriesMockRecorder struct {
	mock *MockshelfQueries
}

// NewMockshelfQueries creates a new mock instance.
func NewMockshelfQueries(ctrl *gomock.Controller) *MockshelfQueries {
	mock := &MockshelfQueries{ctrl: ctrl}
	mock.recorder = &MockshelfQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockshelfQueries) EXPECT() *MockshelfQueriesMockRecorder {
	return m.recorder
}

// createShelfTx mocks base method.
func (m *MockshelfQueries) createShelfTx(ctx context.Context, tx *sql.Tx, shelf warehousemanagementservice.Shelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createShelfTx", ctx, tx, shelf)
	ret0, _ := ret[0].(error)
	return ret0
}

// createShelfTx indicates an expected call of createShelfTx.
func (mr *MockshelfQueriesMockRecorder) createShelfTx(ctx, tx, shelf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createShelfTx", reflect.TypeOf((*MockshelfQueries)(nil).createShelfTx), ctx, tx, shelf)
}

// deleteShelfTx mocks base method.
func (m *MockshelfQueries) deleteShelfTx(ctx context.Context, tx *sql.Tx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteShelfTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteShelfTx indicates an expected call of deleteShelfTx.
func (mr *MockshelfQueriesMockRecorder) deleteShelfTx(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteShelfTx", reflect.TypeOf((*MockshelfQueries)(nil).deleteShelfTx), ctx, tx, id)
}

// getShelfByIdTx mocks base method.
func (m *MockshelfQueries) getShelfByIdTx(ctx context.Context, tx *sql.Tx, id string) (warehousemanagementservice.Shelf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getShelfByIdTx", ctx, tx, id)
	ret0, _ := ret[0].(warehousemanagementservice.Shelf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getShelfByIdTx indicates an expected call of getShelfByIdTx.
func (mr *MockshelfQueriesMockRecorder) getShelfByIdTx(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getShelfByIdTx", reflect.TypeOf((*MockshelfQueries)(nil).getShelfByIdTx), ctx, tx, id)
}

// shelfBlockExistsTx mocks base method.
func (m *MockshelfQueries) shelfBlockExistsTx(ctx context.Context, tx *sql.Tx, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "shelfBlockExistsTx", ctx, tx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// shelfBlockExistsTx indicates an expected call of shelfBlockExistsTx.
func (mr *MockshelfQueriesMockRecorder) shelfBlockExistsTx(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "shelfBlockExistsTx", reflect.TypeOf((*MockshelfQueries)(nil).shelfBlockExistsTx), ctx, tx, id)
}

// updateShelfTx mocks base method.
func (m *MockshelfQueries) updateShelfTx(ctx context.Context, tx *sql.Tx, shelf warehousemanagementservice.Shelf) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateShelfTx", ctx, tx, shelf)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateShelfTx indicates an expected call of updateShelfTx.
func (mr *MockshelfQueriesMockRecorder) updateShelfTx(ctx, tx, shelf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateShelfTx", reflect.TypeOf((*MockshelfQueries)(nil).updateShelfTx), ctx, tx, shelf)
}
