// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/database/postgres/warehouse.go

// Package postgres is a generated GoMock package.
package postgres

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	warehousemanagementservice "warehouse-management-service"

	gomock "github.com/golang/mock/gomock"
)

// Mockqueries is a mock of warehouseQueries interface.
type Mockqueries struct {
	ctrl     *gomock.Controller
	recorder *MockqueriesMockRecorder
}

// MockqueriesMockRecorder is the mock recorder for Mockqueries.
type MockqueriesMockRecorder struct {
	mock *Mockqueries
}

// NewMockqueries creates a new mock instance.
func NewMockqueries(ctrl *gomock.Controller) *Mockqueries {
	mock := &Mockqueries{ctrl: ctrl}
	mock.recorder = &MockqueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockqueries) EXPECT() *MockqueriesMockRecorder {
	return m.recorder
}

// createWarehouseTx mocks base method.
func (m *Mockqueries) createWarehouseTx(ctx context.Context, tx *sql.Tx, warehouse *warehousemanagementservice.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createWarehouseTx", ctx, tx, warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// createWarehouseTx indicates an expected call of createWarehouseTx.
func (mr *MockqueriesMockRecorder) createWarehouseTx(ctx, tx, warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createWarehouseTx", reflect.TypeOf((*Mockqueries)(nil).createWarehouseTx), ctx, tx, warehouse)
}

// deleteWarehouseTx mocks base method.
func (m *Mockqueries) deleteWarehouseTx(ctx context.Context, tx *sql.Tx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteWarehouseTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteWarehouseTx indicates an expected call of deleteWarehouseTx.
func (mr *MockqueriesMockRecorder) deleteWarehouseTx(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteWarehouseTx", reflect.TypeOf((*Mockqueries)(nil).deleteWarehouseTx), ctx, tx, id)
}

// getWarehouseByIdTx mocks base method.
func (m *Mockqueries) getWarehouseByIdTx(ctx context.Context, tx *sql.Tx, id string) (*warehousemanagementservice.Warehouse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getWarehouseByIdTx", ctx, tx, id)
	ret0, _ := ret[0].(*warehousemanagementservice.Warehouse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getWarehouseByIdTx indicates an expected call of getWarehouseByIdTx.
func (mr *MockqueriesMockRecorder) getWarehouseByIdTx(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getWarehouseByIdTx", reflect.TypeOf((*Mockqueries)(nil).getWarehouseByIdTx), ctx, tx, id)
}

// updateWarehouseTx mocks base method.
func (m *Mockqueries) updateWarehouseTx(ctx context.Context, tx *sql.Tx, warehouse *warehousemanagementservice.Warehouse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateWarehouseTx", ctx, tx, warehouse)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateWarehouseTx indicates an expected call of updateWarehouseTx.
func (mr *MockqueriesMockRecorder) updateWarehouseTx(ctx, tx, warehouse interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateWarehouseTx", reflect.TypeOf((*Mockqueries)(nil).updateWarehouseTx), ctx, tx, warehouse)
}
